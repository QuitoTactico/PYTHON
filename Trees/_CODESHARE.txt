https://www.kevanahlquist.com/osm_pathfinding/

class Node:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def vistaSupAux(root,diccionario, laCoordenadaX):
    if root == None:
        return
    else:
				if laCoordenadaX not in diccionario:
      		diccionario[laCoordenadaX] = root.val
        vistaSupAux(root.left,diccionario, laCoordenadaX-1)
        vistaSupAux(root.right,diccionario, laCoordenadaX+1)
        
def vistaSup(root):
    diccionario_que_dice_dado_un_valor_de_x_quien_esta_mas_arriba = dict()
    vistaSupAux(root,diccionario_que_dice_dado_un_valor_de_x_quien_esta_mas_arriba,0)
    print str(list(diccionario.values())).replace(","," ")

  
def camino(a,b,mat):
  if a == b:
    return True
  vecinos = getNeighbours(a, mat)
  for vecino in vecinos:
    mat[a][vecino] = 0
    if camino(vecino,b,mat):
      return True
  return False

def getNeighbours(a, mat):
  answer = []
  destinations = mat[a]
  for i in range(len(destinations)):
    if destinations[i] == 1:
      answer = answer + [i]
  return answer

def sacarEnUnaListaLosVecinosDe(a:int, mat:list) -> list
    respuesta = []
    posiblesDestinos = mat[a]
    for i in range(0,len(posiblesDestinos)):
        if posiblesDestinos[i] == 1: 
            respuesta = respuesta + [i]
    return respuesta
  
def camino(a: int,b: int,mat: list) -> bool:
	porDondeYoYaPase = [False]*len(mat)
  return caminoAux(a,b,mat,porDondeYoYaPase)
  
  
def caminoAux(a: int,b: int,mat: list, porDondeYoYaPase: list) -> bool:
		porDondeYoYaPase[a] = True  
    if a == b:
        return True
    else:
        vecinos = sacarEnUnaListaLosVecinosDe(a, mat)
        for vecino in vecinos:
            if porDondeYoYaPase[vecino] == False:
           	  hayCaminoDeEseVecinoHastaElDestino = camino(vecino,b,mat,porDondeYoYaPase)
            	if hayCaminoDeEseVecinoHastaElDestino == True:
                 return True
        return False




''' 
    _                ___       _.--.
    \`.|\..----...-'`   `-._.-'_.-'`    
    /  ' `         ,       _.-'          
    )/' _/     \   `-_,   /            nya
    `-'" `"\_  ,_.-;_.-\_ ',           
        _.-'_./   {_.'   ; /         
       {_.-``-'         {_/      
       '''         

def bfs(matriz, x, y):
  q = []
  q.append((x, y))
  
  while len(q):
    currx, curry = q[0]
    matriz[currx][curry] = 0
    q.pop(0)
    for fila in (0, 1, -1):
    	for col in (0, 1, -1):
        newx, newy = currx + fila, curry + col
        if 0 <= newx < n and 0 <= newy < m:
          if matriz[newx][newy] == 0:
            continue
          q.apppend((newx, newy))

def dfs(matriz, x, y):
  matriz[x][y]  = 0
  
  n, m = len(matriz), len(matriz[0])
  for fila in (0, 1, -1):
    for col in (0, 1, -1):
      newx, newy = x + fila, y + col
      if 0 <= newx < n and 0 <= newy < m:
        if matriz[newx][newy] == 0:
          continue
        dfs(matriz, newx, newy)
        
        

def islas(matriz):
  ans = 0
  for i in range(len(matriz)):
    for j in range(len(matriz[0])):
      if matriz[i][j] == 1:
        dfs(matriz, i, j)
        ans += 1

#Busqueda primero en profundidad y despuÃ©s en amplitud (DFS)
def unCaminoEntreElOrigenYElDestinoEnUnGrafo(grafo,origen : int,destino : int) -> list:
  visitados[origen] = True
  if origen==destino:
    return [origen]
  else:
    losVecinosDelOrigen=grafo.obtenerLosVecinosAdyacentesDe(origen)
    for vecinoDelOrigen in losVecinosDelOrigen:
      if not vecinoDelOrigen in visitados:
        caminoEntreElVecinoDelOrigenYElDestino = hayONoUnCaminoEdiccionarioDeLosVerticesPorDondeYoYaHePasadontreElOrigenYElDestinoEnUnGrafoAux(grafo,vecinoDelOrigen,destino)
        if caminoEntreElVecinoDelOrigenYElDestino != []:
          return [origen] + caminoEntreElVecinoDelOrigenYElDestino
    return []
  
  
def hayONoUnCaminoEntreElOrigenYElDestinoEnUnGrafo(grafo,origen,destino):
  diccionarioDeLosVerticesPorDondeYoYaHePasado = dict()
  return hayONoUnCaminoEntreElOrigenYElDestinoEnUnGrafoAux(grafo,origen,destino,diccionarioDeLosVerticesPorDondeYoYaHePasado)

def hayONoUnCaminoEntreElOrigenYElDestinoEnUnGrafoAux(grafo,origen:int,destino:int,visitados):
  visitados[origen] = True
  if origen==destino:
    return True
  else:
    losVecinosDelOrigen=grafo.obtenerLosVecinosAdyacentesDe(origen)
    for vecinoDelOrigen in losVecinosDelOrigen:
      if not vecinoDelOrigen in visitados:
        hayCaminoEntreElVecinoDelOrigenYElDestino = hayONoUnCaminoEdiccionarioDeLosVerticesPorDondeYoYaHePasadontreElOrigenYElDestinoEnUnGrafoAux(grafo,vecinoDelOrigen,destino)
        if hayCaminoEntreElVecinoDelOrigenYElDestino:
          return True
    return False

# http://www.webgraphviz.com/?tab=map

from collections import deque
class GrafoDic:
  def __init__(self,numVertices=0):
    self.graph = {}
    self.numVertices = numVertices
    
  def obtenerPeso(self,origen,destino):
    if origen in self.graph:
      if destino in self.graph:
        return self.graph[origen][destino]
    return 0
  
  def cambiarPeso(self,origen,destino,peso):
    if origen in self.graph:
      self.graph[origen][destino] = peso
    else:
      self.graph[origen] = {destino:peso}

  def obtenerLosVecinoOAdyacentesDe(self,origen):
    destinos = deque()
    losDestinosDelOrigen = self.graph[origen]
    for i in losDestinosDelOrigen.keys():
      destinos.append(i)
    return destinos
  
  def __str__(self):
    return str(self.graph)
  
  def dibujar(self):
    print("digraph G {")
    for i in self.graph:
      for j in self.graph[i]:
        print ("\""+str(i) + "\" -> \""+str(j)+"\" [ label = \""+str(self.graph[i][j])+"\" ];")
    print("}")
  
  def __str__(self):
    return str(self.graph)
  
def main():
  grafo = GrafoDic(5)
  grafo.cambiarPeso(0,1,15)
  grafo.cambiarPeso(2,1,12)
  grafo.cambiarPeso(3,1,11)
  grafo.cambiarPeso(3,4,21)
  grafo.cambiarPeso(4,3,18)
  print(grafo)
  print(grafo.obtenerLosVecinoOAdyacentesDe(3))
  print(hayONoUnCaminoEntreElOrigenYElDestinoEnUnGrafo(grafo,0,3))
main()

def main2():
  grafo = GrafoDic(5)
  grafo.cambiarPeso((1,2),(3,4),(4,1))
  grafo.cambiarPeso((4,6),(2,0),(1,0.3))
  grafo.cambiarPeso((3,4),(1,2),(2,0.45))
  grafo.cambiarPeso((1,2),(4,6),(9,0.99))
  grafo.cambiarPeso((4,6),(3,4),(3,0))
  print(grafo)
  print(grafo.obtenerLosVecinoOAdyacentesDe((1,2))
main2()

        
import numpy as np
from collections import deque
class GrafoMA:
  def __init__(self,numVertices):
    self.matriz = np.zeros( (numVertices, numVertices) )
    self.numVertices = numVertices
    
  def obtenerPeso(self,origen,destino):
    return self.matriz[origen][destino]
  
  def cambiarPeso(self,origen,destino,peso):
    self.matriz[origen][destino] = peso

  def obtenerLosVecinoOAdyacentesDe(self,origen):
    destinos = deque()
    losDestinosDelOrigen = self.matriz[origen]
    for i in range(self.numVertices):
      if losDestinosDelOrigen[i] != 0:
        destinos.append(i)
    return destinos
  
  def __str__(self):
    return str(self.matriz)
  
  if root1.val==root2.val:
            if root1.right==root2.right:
                return ArbolesIguales(root1.right,root2.right)
            else: 
                return False 

https://www.cs.usfca.edu/~galles/visualization/DFS.html


class Nodo:
  def __init__(self,valor):
    self.valor = valor #Un nodo tiene un valor
    self.izq = None
    self.der = None
    
def contarElNumeroDeNodosDeUnArbolCuyaRaizEs(raiz : Nodo) -> int:
  if raiz is None:
    return 0
  elNumeroDeElementosDelArbolIzquierdo = contarElNumeroDeNodosDeUnArbolCuyaRaizEs(raiz.izq)
  elNumeroDeElementosDelArbolDerecho = contarElNumeroDeNodosDeUnArbolCuyaRaizEs(raiz.der)
  elNumeroDeElementosDeLaRaizSolita = 1
  return elNumeroDeElementosDeLaRaizSolita + elNumeroDeElementosDelArbolIzquierdo + elNumeroDeElementosDelArbolDerecho

n1 = Nodo(1)
n2 = Nodo(2)
n3 = Nodo(3)
n4 = Nodo(4)
n5 = Nodo(5)
n1.izq = n2
n1.der = n3
n2.izq = n4
n4.der = n5

print(contarElNumeroDeNodosDeUnArbolCuyaRaizEs(n1))

def decirLaSumaDeDatosQueHayEnLosNodosDeUnArbolNoSumarLosNodosSinoSusDatos(raiz : Nodo) -> int:
	if raiz is None:
    return 0
  sumaIzq = decirLaSumaDeDatosQueHayEnLosNodosDeUnArbolNoSumarLosNodosSinoSusDatos(raiz.izq)
  sumaDer = decirLaSumaDeDatosQueHayEnLosNodosDeUnArbolNoSumarLosNodosSinoSusDatos(raiz.der)
  sumaDeLaRaizSolita = raiz.valor
  return sumaDeLaRaizSolita + sumaIzq + sumaDer

def f(raiz):
  return 0 if raiz is None else raiz.valor + f(raiz.izq) + f(raiz.der)

def auxDecirElPromedioDelosValoresDeLosNodosDeUnArbolCuyaRaizEs(raiz : Nodo) -> tuple:
  if raiz is None:
    return 0,0
  sumaIzq, NodosALaIzq = auxDecirElPromedioDelosValoresDeLosNodosDeUnArbolCuyaRaizEs(raiz.izq)
  sumaDer, NodosALaDer = auxDecirElPromedioDelosValoresDeLosNodosDeUnArbolCuyaRaizEs(raiz.der)
  return sumaIzq+sumaDer+raiz.valor, NodosALaIzq + NodosALaDer + 1

def decirElPromedioDelosValoresDeLosNodosDeUnArbolCuyaRaizEs(raiz : Nodo) -> float:
  suma, numeroDeNodos = auxDecirElPromedioDelosValoresDeLosNodosDeUnArbolCuyaRaizEs(raiz)
  return suma/numeroDeNodos

def altura(raiz : Nodo) -> int:
  if raiz is None:
    return 0
  else:
    return max(altura(raiz.izq),altura(raiz.der)) + 1

class Nodo:
  def __init__(self,valor):
    self.valor = valor
    self.izq = None
    self.der = None
    
n1 = Nodo(1)
n2 = Nodo(2)
n3 = Nodo(3)
n4 = Nodo(4)
n5 = Nodo(5)
n1.izq = n2
n1.der = n3
n2.izq = n4
n4.der = n5

def buscar(raiz : Nodo,elemento : int) -> Bool:
  if raiz == None:
    return False
  if raiz.valor == elemento:
    return True
 	else:
    estoDiceSiEstaALaIzquierda = buscar(raiz.izq,elemento)
    estoDiceSiEstaALaDerecha = buscar(raiz.der,elemento)
    return estoDiceSiEstaALaIzquierda or estoDiceSiEstaALaDerecha

def buscarConCiclos(raiz,elemento):
  temp = raiz
  while (temp is not None):
    temp = temp.izq
  while (temp is not None):
    temp = temp.der
    
def buscarEnBST(raiz,elemento):
  if raiz == None:
    return Fale
  if raiz.valor == elemento:
    return True
  else:
    if elemento > raiz.valor:
      return buscarEnBST(raiz.der,elemento)
    else:
   	  return buscarEnBST(raiz.izq,elemento)

https://www.geeksforgeeks.org/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/#hashing

def arreglo(arr1,arr2):
    mapa = {}
    
    res = set()
    for val in arr1:
        mapa[val] = 1
    
    for val in arr2:
        if val in mapa:
            res.add(val)
    
    return sorted(list(res))

def caracter(cadena):
    mapa = {}
    if not cadena:
        return ""
    for c in cadena:
        if c == ' ':
            continue
        if c in mapa:
            return c
        else:
            mapa[c] = 1
    

https://en.wikipedia.org/wiki/MD5

tabla_de_hash = dict()
tabla_de_hash = { }
#insertar
tabla_de_hash["polar"] = 123
tabla_de_hash["panda"] = 456
tabla_de_hash["pardo"] = 678
#buscar
print(tabla_de_hash["polar"])
tabla_de_hash["polar"] = 127867863
print(tabla_de_hash["polar"])
print("polar" in tabla_de_hash)
print("guitarrista" in tabla_de_hash)
tabla_de_hash.pop("polar")
print(hash("pardo"))
print(hash("polar"))
print(hash("guitarrista"))

2from collections import deque
cadenaConLosNumeros = input() #"2 3 +"
listaConLosNumeros = cadenaConLosNumeros.split(" ") #["2","3","+"]
pila = deque()
for elemento in listaConLosNumeros:
  if elemento in ["+","-","*","/"]: #es un operador
    operando2 = pila.pop()
    operando1 = pila.pop()
    respuesta = 0
    if elemento == "+":
      respuesta = operando1+operando2
    elif elemento == "-":
      respuesta = operando1-operando2
    elif elemento == "*":
      respuesta = operando1*operando2
    elif elemento == "/":
      respuesta = operando1/operando2
    pila.append(respuesta)
  else: #es un nÃºmero
    pila.append(int(elemento))
print(pila.pop())

from collections import deque
cadenaConLosNumeros = input() #"2 3 +"
listaConLosNumeros = cadenaConLosNumeros.split(" ") #["2","3","+"]
pila = deque()
for elemento in listaConLosNumeros:
  if elemento in ["+","-","*","/"]: #es un operador
    operando2 = pila.pop()
    operando1 = pila.pop()
    respuesta = eval(str(operando1)+elemento+str(operando2))
    pila.append(respuesta)
  else: #es un nÃºmero
    pila.append(int(elemento))
print(pila.pop())
    
from collections import deque
n = int(input())
cadenaConLosNumeros = input()
listaConLosNumeros = cadenaConLosNumeros.split(" ")
cola = deque()
for numero in listaConLosNumeros:
  cola.appendleft(numero)
while len(cola) != 0:
  elNumero = cola.pop()
  print(elNumero,end=" ")


from collections import deque
n = int(input())
cadenaConLosNumeros = input()
listaConLosNumeros = cadenaConLosNumeros.split(" ")
pila = deque()
for numero in listaConLosNumeros:
  pila.append(numero)
while len(pila) != 0:
  elNumero = pila.pop()
  print(elNumero,end=" ")

https://github.com/mauriciotoro/ST0245-Eafit/blob/master/curriculo-y-agenda/ED1-Agenda-2022-1.xls

from collections import deque
n = 7
cola = deque() # crear una cola
cola.appendleft("1") #ingresar el 1 a la cola
for _ in range(n):
  elElementoQueLlegoPrimero = cola.pop()
  print(elElementoQueLlegoPrimero)
  cola.appendleft(elElementoQueLlegoPrimero+"0")
  cola.appendleft(elElementoQueLlegoPrimero+"1")

  
  
from collections import deque
cola = deque()
for i in range(1,3+1):
  cola.appendleft(i)
while len(cola) != 0:
  unaVariable = cola.pop()
  print(unaVariable)


def hanoi(n : int, A: int, B: int, C:int):
 if n == 1:
  print("mover",str(A)," a ",str(C))
 else:
  hanoi(n-1,A,C,B)
  hanoi(1,A,B,C)
  hanoi(n-1,B,A,C)
 
class Node:
    def __init__(self, val):
        self.val = val
        self.next = None
      
def obtenerUnNodoEnLaPosicionI(head: Node, i:int )-> Node:
 elNodoActual = head
 for _ in range(1,i):
   if elNodoActual == None:
    return None
   elSiguienteDelNodoActual = elNodoActual.next
   elNodoActual = elSiguienteDelNodoActual
 return elNodoActual
 
 def insertarUnNodoEnLaPosicionI(head: Node, valor: int, i:int):
  unNuevoNodoConValor = Node(valor)
  if i == 1:
   unNuevoNodoConValor.next = head
   return unNuevoNodoConValor
  elNodoEnLaPosicionIMenosUno = obtenerUnNodoEnLaPosicionI(head,i-1)
  if elNodoEnLaPosicionIMenosUno == None:
   return head
  unNuevoNodoConValor.next = elNodoEnLaPosicionIMenosUno.next
  elNodoEnLaPosicionIMenosUno.next = unNuevoNodoConValor
  return head

def insertar(head, valor, i):
 return insertarUnNodoEnLaPosicionI(head,valor,i)

 


_
       \`*-.
        )  _`-.        by:    à¶
       .  : `. .
       : _   '  \
       ; *` _.   `*-._          
       `-.-'          `-.
         ;       `       `.
         :.       .        \    
         . \  .   :   .-'   .   
         '  `+.;  ;  '      :   
         :  '  |    ;       ;-. 
         ; '   : :`-:     _.`* ;
      .*' /  .*' ; .*`- +'  `*'
      `*-*   `*-*  `*-*'

https://pythontutor.com/visualize.html#mode=display